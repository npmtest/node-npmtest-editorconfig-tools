{"/home/travis/build/npmtest/node-npmtest-editorconfig-tools/test.js":"/* istanbul instrument in package npmtest_editorconfig_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-editorconfig-tools/lib.npmtest_editorconfig_tools.js":"/* istanbul instrument in package npmtest_editorconfig_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_editorconfig_tools = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_editorconfig_tools = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-editorconfig-tools/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-editorconfig-tools && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_editorconfig_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_editorconfig_tools\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_editorconfig_tools.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_editorconfig_tools.rollup.js'] =\n            local.assetsDict['/assets.npmtest_editorconfig_tools.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_editorconfig_tools.__dirname + '/lib.npmtest_editorconfig_tools.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-editorconfig-tools/node_modules/editorconfig-tools/bin/index.js":"#!/usr/bin/env node\ntry {\n  require('coffee-script/register');\n  // in production, this will fail if coffeescript isn't installed, but the\n  // coffee is compiled anyway, so it doesn't matter\n} catch(e){}\n\nvar cli = require('../lib/cli');\n","/home/travis/build/npmtest/node-npmtest-editorconfig-tools/node_modules/editorconfig-tools/lib/cli.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var ArgumentParser, Rule, Rules, W, argparser, argv, check, editorconfig, exitCode, filePath, fix, fs, infer, packageInfo, path, promise, promises, requireTree, results, ruleName, subparsers, _, _fn, _i, _j, _len, _len1, _ref, _ref1;\n\n  path = require('path');\n\n  packageInfo = require(path.join(__dirname, '../package.json'));\n\n  ArgumentParser = require('argparse').ArgumentParser;\n\n  argparser = new ArgumentParser({\n    version: packageInfo.version,\n    addHelp: true,\n    description: packageInfo.description\n  });\n\n  subparsers = argparser.addSubparsers({\n    title: 'action',\n    dest: 'action'\n  });\n\n  infer = subparsers.addParser('infer', {\n    help: 'Infer .editorconfig settings from one or more files',\n    addHelp: true\n  });\n\n  infer.addArgument(['files'], {\n    type: 'string',\n    metavar: 'FILE',\n    nargs: '+',\n    help: 'The file(s) to use'\n  });\n\n  check = subparsers.addParser('check', {\n    help: 'Validate that file(s) adhere to .editorconfig settings, returning an error code if they don\\'t',\n    addHelp: true\n  });\n\n  check.addArgument(['files'], {\n    type: 'string',\n    metavar: 'FILE',\n    nargs: '+',\n    help: 'The file(s) to use'\n  });\n\n  fix = subparsers.addParser('fix', {\n    help: 'Fix formatting errors that disobey .editorconfig settings',\n    addHelp: true\n  });\n\n  fix.addArgument(['files'], {\n    type: 'string',\n    metavar: 'FILE',\n    nargs: '+',\n    help: 'The file(s) to use'\n  });\n\n  argv = argparser.parseArgs();\n\n  editorconfig = require('editorconfig');\n\n  fs = require('graceful-fs');\n\n  path = require('path');\n\n  W = require('when');\n\n  _ = require('lodash');\n\n  requireTree = require('require-tree');\n\n  Rules = requireTree('./rules');\n\n  exitCode = 0;\n\n  if (argv.action === 'check') {\n    promises = [];\n    Object.keys(Rules).forEach(function(ruleName) {\n      var Rule;\n      Rule = Rules[ruleName];\n      return argv.files.forEach(function(filePath) {\n        var property;\n        if (fs.lstatSync(filePath).isDirectory()) {\n          return;\n        }\n        property = void 0;\n        return promises.push((new Rule(filePath)).then(function(returnedProperty) {\n          property = returnedProperty;\n          return property.check();\n        }).then(function(res) {\n          return {\n            res: res,\n            file: filePath,\n            rule: property.propertyName\n          };\n        })[\"catch\"](function(err) {\n          return {\n            file: filePath,\n            rule: property.propertyName,\n            error: err\n          };\n        }));\n      });\n    });\n    W.all(promises).done(function(res) {\n      var file, files, match, matches, text, verbose, _i, _j, _len, _len1;\n      files = _.uniq(_.pluck(res, 'file'));\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        matches = _.where(res, {\n          file: file\n        });\n        verbose = true;\n        if (verbose || _.compact(_.pluck(matches, 'error')).length > 0) {\n          for (_j = 0, _len1 = matches.length; _j < _len1; _j++) {\n            match = matches[_j];\n            if (match.error != null) {\n              exitCode = 1;\n              text = \"\" + file + \" failed \" + match.rule;\n              if (match.error.lineNumber != null) {\n                text += \" on line \" + match.error.lineNumber;\n              }\n              if (match.error.message != null) {\n                text += \": \" + match.error.message;\n              }\n              console.log(text);\n            } else if (verbose) {\n              if (match.res === null) {\n                console.log(\"\" + file + \" ignored \" + match.rule + \" (no setting defined)\");\n              } else {\n\n              }\n            }\n          }\n        }\n      }\n      return process.exit(exitCode);\n    });\n  } else if (argv.action === 'fix') {\n    results = [];\n    promise = W.resolve();\n    _ref = Object.keys(Rules);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      ruleName = _ref[_i];\n      Rule = Rules[ruleName];\n      _ref1 = argv.files;\n      _fn = function(Rule, filePath) {\n        var property;\n        property = void 0;\n        return promise = promise.then(function() {\n          return new Rule(filePath);\n        }).then(function(returnedProperty) {\n          property = returnedProperty;\n          return property.fix();\n        }).then(function(res) {\n          return results.push({\n            res: res,\n            file: filePath,\n            rule: property.propertyName\n          });\n        })[\"catch\"](function(err) {\n          return results.push({\n            file: filePath,\n            rule: property.propertyName,\n            error: err\n          });\n        });\n      };\n      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n        filePath = _ref1[_j];\n        if (fs.lstatSync(filePath).isDirectory()) {\n          continue;\n        }\n        _fn(Rule, filePath);\n      }\n    }\n    promise.done(function() {\n      var result, verbose, _k, _len2, _results;\n      verbose = true;\n      _results = [];\n      for (_k = 0, _len2 = results.length; _k < _len2; _k++) {\n        result = results[_k];\n        if (result.error != null) {\n          _results.push(console.log(\"\" + result.file + \" \" + result.error.message));\n        } else if (verbose) {\n          _results.push(console.log(\"\" + result.file + \" fixed\"));\n        } else {\n          _results.push(void 0);\n        }\n      }\n      return _results;\n    });\n  } else if (argv.action === 'infer') {\n    promises = [];\n    Object.keys(Rules).forEach(function(ruleName) {\n      Rule = Rules[ruleName];\n      return argv.files.forEach(function(filePath) {\n        var property;\n        if (fs.lstatSync(filePath).isDirectory()) {\n          return;\n        }\n        property = void 0;\n        return promises.push((new Rule(filePath)).then(function(returnedProperty) {\n          property = returnedProperty;\n          return property.infer();\n        }).then(function(res) {\n          return {\n            res: String(res),\n            file: filePath,\n            rule: property.propertyName\n          };\n        })[\"catch\"](function(err) {\n          return {\n            file: filePath,\n            rule: property.propertyName,\n            error: err\n          };\n        }));\n      });\n    });\n    W.all(promises).done(function(res) {\n      var distributionOfValues, files, group, groups, property, rule, ruleGroup, rules, selector, sortedValues, value, _k, _l, _len2, _len3, _ref2, _ref3, _results;\n      rules = {};\n      groups = _.groupBy(res, 'rule');\n      for (property in groups) {\n        group = groups[property];\n        distributionOfValues = _.pairs(_.countBy(_.pluck(group, 'res'), function(x) {\n          return x;\n        }));\n        sortedValues = _.sortBy(distributionOfValues, function(x) {\n          return -x[1];\n        });\n        if (rules['[*]'] == null) {\n          rules['[*]'] = [];\n        }\n        rules['[*]'].push([property, sortedValues[0][0]]);\n        _ref2 = sortedValues.slice(1);\n        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n          value = _ref2[_k];\n          if ((_ref3 = value[0]) === 'null' || _ref3 === 'undefined') {\n            continue;\n          }\n          files = _.pluck(_.where(group, {\n            res: value[0]\n          }), 'file');\n          selector = \"[{\" + (files.join(',')) + \"}]\";\n          if (rules[selector] == null) {\n            rules[selector] = [];\n          }\n          rules[selector].push([property, value[0]]);\n        }\n      }\n      _results = [];\n      for (selector in rules) {\n        ruleGroup = rules[selector];\n        console.log(selector);\n        for (_l = 0, _len3 = ruleGroup.length; _l < _len3; _l++) {\n          rule = ruleGroup[_l];\n          if (rule[0] === 'indent_char') {\n            if (rule[1] === '\\t') {\n              console.log('indent_style: tab');\n            } else {\n              console.log('indent_style = space');\n              console.log(\"indent_size = \" + rule[1].length);\n            }\n          } else {\n            console.log(\"\" + rule[0] + \" = \" + rule[1]);\n          }\n        }\n        _results.push(console.log(''));\n      }\n      return _results;\n    });\n  }\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-editorconfig-tools/node_modules/editorconfig-tools/lib/rules/end-of-line.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var EndOfLine, LineRule,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  LineRule = require('../line-rule');\n\n  EndOfLine = (function(_super) {\n    __extends(EndOfLine, _super);\n\n    function EndOfLine() {\n      this.inferLine = __bind(this.inferLine, this);\n      this.fixLine = __bind(this.fixLine, this);\n      return EndOfLine.__super__.constructor.apply(this, arguments);\n    }\n\n    EndOfLine.prototype.propertyName = 'end_of_line';\n\n    EndOfLine.prototype._eolRegex = /(?:\\r\\n|\\n|\\r)$/;\n\n    EndOfLine.prototype.fixLine = function(line) {\n      return line.replace(this._eolRegex, (function(_this) {\n        return function(match) {\n          switch (_this.setting) {\n            case 'crlf':\n              return '\\r\\n';\n            case 'cr':\n              return '\\r';\n            case 'lf':\n              return '\\n';\n            default:\n              throw new Error(\"unsupported value for end_of_line: \" + _this.setting);\n          }\n        };\n      })(this));\n    };\n\n\n    /**\n     * Infer the line ending, returning `undefined` if there is no line ending\n     * @param {String} line\n     */\n\n    EndOfLine.prototype.inferLine = function(line) {\n      var _ref;\n      switch ((_ref = line.match(this._eolRegex)) != null ? _ref[0] : void 0) {\n        case '\\r\\n':\n          return 'crlf';\n        case '\\n':\n          return 'lf';\n        case '\\r':\n          return 'cr';\n      }\n    };\n\n    return EndOfLine;\n\n  })(LineRule);\n\n  module.exports = EndOfLine;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-editorconfig-tools/node_modules/editorconfig-tools/lib/line-rule.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var EditorConfigError, LineRule, Rule, W,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  W = require('when');\n\n  Rule = require('./rule');\n\n  EditorConfigError = require('./editorconfigerror');\n\n  LineRule = (function(_super) {\n    __extends(LineRule, _super);\n\n    function LineRule() {\n      this.inferLine = __bind(this.inferLine, this);\n      this.checkLine = __bind(this.checkLine, this);\n      this.fixLine = __bind(this.fixLine, this);\n      this.infer = __bind(this.infer, this);\n      this.check = __bind(this.check, this);\n      this.fix = __bind(this.fix, this);\n      this.fileAsLines = __bind(this.fileAsLines, this);\n      return LineRule.__super__.constructor.apply(this, arguments);\n    }\n\n\n    /**\n     * Get the contents of the file as an array of lines.\n     * @return {Promise} A promise for the lines as an array of strings.\n     */\n\n    LineRule.prototype.fileAsLines = function() {\n      return this.file.read({\n        encoding: 'utf8'\n      }).then(function(data) {\n        var i, joinedLines, lines;\n        lines = data.split(/(\\r\\n|\\n|\\r)/);\n        i = 0;\n        joinedLines = [];\n        while (i < lines.length) {\n          joinedLines.push(lines[i] + (lines[i + 1] || ''));\n          i += 2;\n        }\n        if (joinedLines.slice(-1)[0] === '') {\n          joinedLines = joinedLines.slice(0, -1);\n        }\n        return joinedLines;\n      });\n    };\n\n    LineRule.prototype.fix = function() {\n      return LineRule.__super__.fix.call(this).then(this.fileAsLines).then((function(_this) {\n        return function(lines) {\n          var line, newLines, _i, _len;\n          newLines = [];\n          for (_i = 0, _len = lines.length; _i < _len; _i++) {\n            line = lines[_i];\n            newLines.push(_this.fixLine(line));\n          }\n          return _this.file.write(newLines.join(''));\n        };\n      })(this));\n    };\n\n    LineRule.prototype.check = function() {\n      if (this.setting == null) {\n        return W.resolve(null);\n      } else {\n        return this.fileAsLines().then((function(_this) {\n          return function(lines) {\n            var line, lineNum, _i, _len, _results;\n            _results = [];\n            for (lineNum = _i = 0, _len = lines.length; _i < _len; lineNum = ++_i) {\n              line = lines[lineNum];\n              _results.push(_this.checkLine(line, lineNum));\n            }\n            return _results;\n          };\n        })(this));\n      }\n    };\n\n    LineRule.prototype.infer = function() {\n      return this.fileAsLines().then((function(_this) {\n        return function(lines) {\n          var line, lineSetting, lineSettings, _i, _len;\n          lineSettings = [];\n          for (_i = 0, _len = lines.length; _i < _len; _i++) {\n            line = lines[_i];\n            lineSetting = _this.inferLine(line);\n            if ((lineSetting != null) && __indexOf.call(lineSettings, lineSetting) < 0) {\n              lineSettings.push(lineSetting);\n            }\n          }\n          if (lineSettings.length === 1) {\n            return lineSettings[0];\n          } else {\n            throw new Error(\"multiple setting values found: \" + (lineSettings.join(', ')));\n          }\n        };\n      })(this));\n    };\n\n\n    /**\n     * @param {String} line\n     * @return {String} The fixed line.\n     */\n\n    LineRule.prototype.fixLine = function(line) {\n      throw new Error(\"Unable to fix \" + this.propertyName);\n    };\n\n\n    /**\n     * Check if the line is valid according to the rule. By default it just uses\n       `inferLine` to check aginst the setting for the rule. Throw an exception if\n       it isn't valid\n     * @param {String} line\n     * @param {Integer} lineNum\n     */\n\n    LineRule.prototype.checkLine = function(line, lineNum) {\n      var detectedSetting;\n      detectedSetting = this.inferLine(line);\n      if ((detectedSetting != null) && detectedSetting !== this.setting) {\n        throw new EditorConfigError(\"found setting '\" + detectedSetting + \"', should be '\" + this.setting + \"'\", this.file.path, lineNum);\n      }\n    };\n\n\n    /**\n     * @param {String} line\n     * @return {String|Integer|Boolean} Setting value for the line.\n     */\n\n    LineRule.prototype.inferLine = function(line) {\n      throw new Error(\"Cannot infer \" + this.propertyName);\n    };\n\n    return LineRule;\n\n  })(Rule);\n\n  module.exports = LineRule;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-editorconfig-tools/node_modules/editorconfig-tools/lib/rule.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var EditorConfigError, File, Rule, W, editorconfig, path,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  path = require('path');\n\n  File = require('fobject');\n\n  W = require('when');\n\n  EditorConfigError = require('./editorconfigerror');\n\n  editorconfig = require('./editorconfig');\n\n  Rule = (function() {\n\n    /**\n     * The \"official\" name of the rule, according to the editorconfig spec.\n     * @type {String}\n     */\n    Rule.prototype.propertyName = '';\n\n\n    /**\n     * The setting of the rule for the file being tested.\n     * @type {String|Integer|Boolean}\n     */\n\n    Rule.prototype.setting = void 0;\n\n\n    /**\n     * The file being tested.\n     * @type {File}\n     */\n\n    Rule.prototype.file = void 0;\n\n\n    /**\n     * Setup the Rule for a given filename so the other methods can be used.\n     * @param {String} filename\n     */\n\n    function Rule(filename) {\n      this.check = __bind(this.check, this);\n      this.fix = __bind(this.fix, this);\n      return editorconfig(filename).then((function(_this) {\n        return function(editorconfig) {\n          _this.editorconfig = editorconfig;\n          _this.setting = _this.editorconfig[_this.propertyName];\n          _this.file = new File(filename);\n          return _this;\n        };\n      })(this));\n    }\n\n\n    /**\n     * Fix the file so it matches the given editorconfig setting\n     * @return {Promise}\n     */\n\n    Rule.prototype.fix = function() {\n      if (this.setting == null) {\n        return W.reject(new EditorConfigError(\"cannot fix \" + this.propertyName + \" (no setting defined)\"));\n      } else {\n        return W();\n      }\n    };\n\n\n    /**\n     * Ensure that the file obeys the editorconfig setting. Throw an error if it\n       doesn't.\n     * @return {Promise}\n     */\n\n    Rule.prototype.check = function() {\n      if (this.setting == null) {\n        return W.resolve(null);\n      } else {\n        return this.infer().then((function(_this) {\n          return function(detectedSetting) {\n            if ((detectedSetting != null) && detectedSetting !== _this.setting) {\n              throw new EditorConfigError(\"found setting '\" + detectedSetting + \"', should be '\" + _this.setting + \"'\", _this.file.path);\n            }\n          };\n        })(this));\n      }\n    };\n\n\n    /**\n     * Determine the value of the setting based on the contents of the file.\n     * @return {Promise} A promise for the value of the setting.\n     */\n\n    Rule.prototype.infer = function() {};\n\n    return Rule;\n\n  })();\n\n  module.exports = Rule;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-editorconfig-tools/node_modules/editorconfig-tools/lib/editorconfigerror.js":"// Generated by CoffeeScript 1.8.0\n\n/**\n * The default SyntaxError class doesn't accept fileName or lineNumber args.\n * Also, being able to pass in the context (text that threw the error) is nice.\n */\n\n(function() {\n  var EditorConfigError,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  EditorConfigError = (function(_super) {\n    __extends(EditorConfigError, _super);\n\n    function EditorConfigError(message, fileName, lineNumber, context) {\n      this.message = message;\n      this.fileName = fileName;\n      this.lineNumber = lineNumber;\n      this.context = context;\n      this.toString = __bind(this.toString, this);\n    }\n\n    EditorConfigError.prototype.toString = function() {\n      var text;\n      text = this.fileName;\n      if (this.lineNumber != null) {\n        text += \":\" + this.lineNumber;\n      }\n      if (this.context != null) {\n        text += \"\\n\" + context;\n      }\n      return text += \"\\nEditorConfigError: \" + this.message;\n    };\n\n    return EditorConfigError;\n\n  })(Error);\n\n  module.exports = EditorConfigError;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-editorconfig-tools/node_modules/editorconfig-tools/lib/editorconfig.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var editorconfig;\n\n  editorconfig = require('editorconfig').parse;\n\n\n  /**\n   * Wrapper for the editorconfig function - converts `indent_style` and\n     `indent_size` into `indent_char`\n   */\n\n  module.exports = function(filepath) {\n    return editorconfig(filepath).then(function(properties) {\n      if (properties.indent_size == null) {\n        properties.indent_size = String(properties.indent_size);\n      }\n      properties.indent_char = ('tab' === properties.indent_size || 'tab' === properties.indent_style ? '\\t' : !isNaN(properties.indent_size) ? Array(properties.indent_size + 1).join(' ') : properties.indent_style === 'space' ? '  ' : void 0);\n      delete properties.indent_style;\n      delete properties.indent_size;\n      return properties;\n    });\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-editorconfig-tools/node_modules/editorconfig-tools/lib/rules/indent-char.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var EditorConfigError, IndentChar, LineRule, Rule, detectIndent,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  LineRule = require('../line-rule');\n\n  Rule = require('../rule');\n\n  detectIndent = require('detect-indent');\n\n  EditorConfigError = require('../editorconfigerror');\n\n  IndentChar = (function(_super) {\n    __extends(IndentChar, _super);\n\n    function IndentChar() {\n      this.infer = __bind(this.infer, this);\n      this.fixLine = __bind(this.fixLine, this);\n      this.fix = __bind(this.fix, this);\n      return IndentChar.__super__.constructor.apply(this, arguments);\n    }\n\n\n    /**\n     * This actually isn't an official property. It's a combination of the\n       `indent_style` and `indent_size` properties that's used internally to do\n       them both at once.\n     */\n\n    IndentChar.prototype.propertyName = 'indent_char';\n\n    IndentChar.prototype.fix = function() {\n      return this.infer().then((function(_this) {\n        return function(_detectedSetting) {\n          _this._detectedSetting = _detectedSetting;\n          if (_this._detectedSetting == null) {\n            throw new Error('couldn\\'t detect indentation');\n          }\n          if (_this.setting === _this._detectedSetting) {\n            return;\n          }\n          _this._indentRegex = new RegExp(\"^(?:\" + _this._detectedSetting + \")*\");\n          return IndentChar.__super__.fix.call(_this);\n        };\n      })(this));\n    };\n\n    IndentChar.prototype.fixLine = function(line) {\n      var match, totalIndents;\n      match = line.match(this._indentRegex)[0];\n      totalIndents = match.length / this._detectedSetting.length;\n      return Array(totalIndents + 1).join(this.setting) + line.slice(match.length);\n    };\n\n    IndentChar.prototype.check = Rule.prototype.check;\n\n    IndentChar.prototype.infer = function() {\n      return this.file.read({\n        encoding: 'utf8'\n      }).then(detectIndent);\n    };\n\n    return IndentChar;\n\n  })(LineRule);\n\n  module.exports = IndentChar;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-editorconfig-tools/node_modules/editorconfig-tools/lib/rules/insert-final-newline.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var InsertFinalNewline, Rule,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  Rule = require('../rule');\n\n  InsertFinalNewline = (function(_super) {\n    __extends(InsertFinalNewline, _super);\n\n    function InsertFinalNewline() {\n      this.infer = __bind(this.infer, this);\n      this.fix = __bind(this.fix, this);\n      return InsertFinalNewline.__super__.constructor.apply(this, arguments);\n    }\n\n    InsertFinalNewline.prototype.propertyName = 'insert_final_newline';\n\n\n    /**\n     * @type {Regex}\n     * @private\n     */\n\n    InsertFinalNewline.prototype._finalNewline = /(?:\\r\\n|\\n|\\r)?$/;\n\n    InsertFinalNewline.prototype.fix = function() {\n      return InsertFinalNewline.__super__.fix.call(this).then((function(_this) {\n        return function() {\n          return _this.file.read({\n            encoding: 'utf8'\n          });\n        };\n      })(this)).then((function(_this) {\n        return function(data) {\n          return _this.file.write(data.replace(_this._finalNewline, function(match) {\n            if (_this.setting === false) {\n              return '';\n            } else {\n              switch (_this.editorconfig['end_of_line']) {\n                case 'crlf':\n                  return '\\r\\n';\n                case 'cr':\n                  return '\\r';\n                default:\n                  return '\\n';\n              }\n            }\n          }));\n        };\n      })(this));\n    };\n\n    InsertFinalNewline.prototype.infer = function() {\n      return this.file.read({\n        encoding: 'utf8'\n      }).then((function(_this) {\n        return function(data) {\n          var finalNewline;\n          if (data === '') {\n            return true;\n          }\n          finalNewline = data.match(_this._finalNewline);\n          return (finalNewline != null) && finalNewline[0] !== '';\n        };\n      })(this));\n    };\n\n    return InsertFinalNewline;\n\n  })(Rule);\n\n  module.exports = InsertFinalNewline;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-editorconfig-tools/node_modules/editorconfig-tools/lib/rules/max-line-length.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var EditorConfigError, LineRule, MaxLineLength, W,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  LineRule = require('../line-rule');\n\n  W = require('when');\n\n  EditorConfigError = require('../editorconfigerror');\n\n\n  /**\n   * @todo Implement fixing and inferring properly. It sucks right now.\n   */\n\n  MaxLineLength = (function(_super) {\n    __extends(MaxLineLength, _super);\n\n    function MaxLineLength() {\n      this.inferLine = __bind(this.inferLine, this);\n      this.checkLine = __bind(this.checkLine, this);\n      return MaxLineLength.__super__.constructor.apply(this, arguments);\n    }\n\n    MaxLineLength.prototype.propertyName = 'max_line_length';\n\n\n    /**\n     * Lifted from end_of_line.coffee\n     */\n\n    MaxLineLength.prototype._eolRegex = /(?:\\r\\n|\\n|\\r)?$/;\n\n    MaxLineLength.prototype.infer = function() {\n      var deferred;\n      deferred = W.defer();\n      deferred.resolve(80);\n      return deferred.promise;\n    };\n\n    MaxLineLength.prototype.checkLine = function(line, lineNum) {\n      var lineLength;\n      lineLength = this.inferLine(line);\n      if (lineLength > this.setting) {\n        throw new EditorConfigError(\"line is \" + lineLength + \" chars, it should be \" + this.setting, this.file.path, lineNum);\n      }\n    };\n\n    MaxLineLength.prototype.inferLine = function(line) {\n      var _ref;\n      return line.length - ((_ref = line.match(this._eolRegex)) != null ? _ref[0].length : void 0);\n    };\n\n    return MaxLineLength;\n\n  })(LineRule);\n\n  module.exports = MaxLineLength;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-editorconfig-tools/node_modules/editorconfig-tools/lib/rules/trim-trailing-whitespace.js":"// Generated by CoffeeScript 1.8.0\n(function() {\n  var LineRule, TrimTrailingWhitespace,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  LineRule = require('../line-rule');\n\n  TrimTrailingWhitespace = (function(_super) {\n    __extends(TrimTrailingWhitespace, _super);\n\n    function TrimTrailingWhitespace() {\n      this.inferLine = __bind(this.inferLine, this);\n      this.infer = __bind(this.infer, this);\n      this.fixLine = __bind(this.fixLine, this);\n      return TrimTrailingWhitespace.__super__.constructor.apply(this, arguments);\n    }\n\n    TrimTrailingWhitespace.prototype.propertyName = 'trim_trailing_whitespace';\n\n\n    /**\n     * The first group is any trailing whitespace, and the 2nd group is the line\n       ending (which might not be there if `insert_final_newline` is false).\n     * @type {Regex}\n     */\n\n    TrimTrailingWhitespace.prototype._trailingWhitespace = /[^\\S\\r\\n]+(\\r\\n|\\n|\\r|)$/;\n\n    TrimTrailingWhitespace.prototype.fixLine = function(line) {\n      var match;\n      if (this.setting) {\n        match = line.match(this._trailingWhitespace);\n        if (match != null) {\n          return line.slice(0, -match[0].length) + match[1];\n        }\n      }\n      return line;\n    };\n\n    TrimTrailingWhitespace.prototype.infer = function() {\n      return this.fileAsLines().then((function(_this) {\n        return function(lines) {\n          var line, _i, _len;\n          for (_i = 0, _len = lines.length; _i < _len; _i++) {\n            line = lines[_i];\n            if (!_this.inferLine(line)) {\n              return false;\n            }\n          }\n          return true;\n        };\n      })(this));\n    };\n\n    TrimTrailingWhitespace.prototype.inferLine = function(line) {\n      return !this._trailingWhitespace.test(line);\n    };\n\n    return TrimTrailingWhitespace;\n\n  })(LineRule);\n\n  module.exports = TrimTrailingWhitespace;\n\n}).call(this);\n"}